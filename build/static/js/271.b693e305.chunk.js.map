{"version":3,"file":"static/js/271.b693e305.chunk.js","mappings":"8NAQA,MAcA,EAdkCA,IAAkB,IAAjB,QAAEC,GAASD,EAC5C,IAAKC,EACH,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAAAC,SAAC,iDAGtB,MAAMC,EAAmBJ,EAAQK,QAAQ,kBAAmB,UAE5D,OACEJ,EAAAA,EAAAA,KAACC,EAAAA,GAAe,CACdI,wBAAyB,CAAEC,OAAQC,IAAAA,SAAmBJ,KACrC,E,uBCNR,SAASK,IAAa,IAADC,EAClC,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,aACnBC,EAAMC,IAAWF,EAAAA,EAAAA,aAClB,QAAEG,IAAYC,EAAAA,EAAAA,OACbC,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GAkBvC,OAjBAO,EAAAA,EAAAA,YAAU,KACWC,WACjB,GAAKL,EACL,IACEG,GAAW,GACX,MAAMG,QAAYC,EAAAA,EAAAA,IAAYP,GAC9BD,EAAQO,EAAIR,MACZF,EAASU,EACX,CAAE,MAAOE,GACPC,MAAM,gGACR,CAAC,QACCN,GAAW,EACb,GAEFO,EAAY,GACX,CAACV,IAEGE,GACLjB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAM,KAEPC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA1B,SAAA,EACEyB,EAAAA,EAAAA,MAACE,EAAAA,EAAS,CAAA3B,SAAA,EACRyB,EAAAA,EAAAA,MAAC1B,EAAAA,GAAe,CAAAC,SAAA,EACdF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLf,QAASA,EACTF,KAAMA,EACNkB,UAAgB,OAALrB,QAAK,IAALA,OAAK,EAALA,EAAOqB,UAClBC,UAAgB,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOsB,UAClBC,SAAe,OAALvB,QAAK,IAALA,OAAK,EAALA,EAAOuB,SACjBC,OAAa,OAALxB,QAAK,IAALA,OAAK,EAALA,EAAOwB,OACfC,MAAY,OAALzB,QAAK,IAALA,OAAK,EAALA,EAAOyB,MACdC,aAAa,KAEfpC,EAAAA,EAAAA,KAACC,EAAAA,GAAoB,CAAAC,UACnBF,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CACZoC,KAAU,OAAL3B,QAAK,IAALA,GAAgB,QAAXD,EAALC,EAAO4B,OAAO,UAAE,IAAA7B,OAAX,EAALA,EAAkB8B,OAAQ,gCAC/BC,IAAI,gBAIVxC,EAAAA,EAAAA,KAACyC,EAAI,CAAC1C,QAAc,OAALW,QAAK,IAALA,OAAK,EAALA,EAAOX,cAExBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAM,MAGb,C","sources":["components/gpt/GptDetailBody.tsx","pages/user/GptStoryDetail.tsx"],"sourcesContent":["import React from 'react';\r\nimport * as S from 'styles/gpt/gptDetail';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\n\r\ninterface BodyProps {\r\n  content: string | undefined;\r\n}\r\n\r\nconst Body: React.FC<BodyProps> = ({ content }) => {\r\n  if (!content) {\r\n    return <S.Container>내용이 없습니다.</S.Container>;\r\n  }\r\n\r\n  const formattedContent = content.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\r\n\r\n  return (\r\n    <S.BodyContainer\r\n      dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(formattedContent) }}\r\n    ></S.BodyContainer>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import { GptLayout } from 'styles/gpt/gptLayout';\r\nimport { getGptStory } from 'api/gpt';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GptStory } from 'types/gptTypes';\r\nimport Header from 'components/gpt/GptDetailHeader';\r\nimport Body from 'components/gpt/GptDetailBody';\r\nimport * as S from 'styles/gpt/gptDetail';\r\nimport { Loader } from 'components/shared';\r\nimport Bottom from 'components/layout/Bottom';\r\nimport { UserType } from 'types/userTypes';\r\n\r\nexport default function GptDetail() {\r\n  const [story, setStory] = useState<GptStory>();\r\n  const [user, setuser] = useState<UserType>();\r\n  const { storyId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    const fetchStory = async () => {\r\n      if (!storyId) return;\r\n      try {\r\n        setLoading(true);\r\n        const res = await getGptStory(storyId);\r\n        setuser(res.user);\r\n        setStory(res);\r\n      } catch (error) {\r\n        alert('스토리를 불러오는데 실패했습니다.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchStory();\r\n  }, [storyId]); // 의존성 배열에 storyId 추가\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <>\r\n      <GptLayout>\r\n        <S.HeaderWrapper>\r\n          <Header\r\n            storyId={storyId}\r\n            user={user}\r\n            createdAt={story?.createdAt}\r\n            updatedAt={story?.updatedAt}\r\n            category={story?.category}\r\n            clicks={story?.clicks}\r\n            title={story?.title}\r\n            isStorypage={true}\r\n          />\r\n          <S.HeaderImageWrapper>\r\n            <S.HeaderImage\r\n              src={story?.images[0]?.path || 'https://picsum.photos/200/150'}\r\n              alt=\"story\"\r\n            />\r\n          </S.HeaderImageWrapper>\r\n        </S.HeaderWrapper>\r\n        <Body content={story?.content} />\r\n      </GptLayout>\r\n      <Bottom />\r\n    </>\r\n  );\r\n}\r\n"],"names":["_ref","content","_jsx","S","children","formattedContent","replace","dangerouslySetInnerHTML","__html","DOMPurify","GptDetail","_story$images$","story","setStory","useState","user","setuser","storyId","useParams","loading","setLoading","useEffect","async","res","getGptStory","error","alert","fetchStory","Loader","_jsxs","_Fragment","GptLayout","Header","createdAt","updatedAt","category","clicks","title","isStorypage","src","images","path","alt","Body","Bottom"],"sourceRoot":""}