{"version":3,"file":"static/js/876.dd42b5de.chunk.js","mappings":"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","sources":["components/gpt/CategorySelector.tsx","components/gpt/GptStoryInfinityScroll.tsx","components/shared/CardSlide.tsx","components/gpt/GptStoryLists.tsx","pages/user/GptPage.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { BookCategory } from '../../constant/bookCategory';\r\nimport { pixelToRem } from 'utils';\r\n\r\nconst CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n  padding: ${pixelToRem(10)};\r\n  width: 100%;\r\n  justify-content: center;\r\n`;\r\n\r\nconst CategoryButton = styled.button<{ isSelected: boolean }>`\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 20px;\r\n\r\n  font-size: ${pixelToRem(14)};\r\n  border: none;\r\n  background-color: ${(props) => (props.isSelected ? '#007bff' : '#f0f0f0')};\r\n  color: ${(props) => (props.isSelected ? 'white' : 'black')};\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: ${(props) => (props.isSelected ? '#0056b3' : '#e0e0e0')};\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    font-size: ${pixelToRem(10)};\r\n    padding: 0.4rem 0.9rem;\r\n  }\r\n`;\r\n\r\nconst SELECTED_CATEGORIES: BookCategory[] = [\r\n  '소설',\r\n  '비소설',\r\n  '과학',\r\n  '판타지',\r\n  '로맨스',\r\n  '추리',\r\n  '자기계발',\r\n  '기술',\r\n  '블로그',\r\n  '여행',\r\n];\r\n\r\ninterface CategorySelectorProps {\r\n  selectedCategory: string | null;\r\n  setSelectedCategory: (category: string) => void;\r\n}\r\n\r\nconst CategorySelector: React.FC<CategorySelectorProps> = ({\r\n  selectedCategory,\r\n  setSelectedCategory,\r\n}) => {\r\n  return (\r\n    <CategoryContainer>\r\n      {SELECTED_CATEGORIES.map((category) => (\r\n        <CategoryButton\r\n          key={category}\r\n          isSelected={selectedCategory === category}\r\n          onClick={() => setSelectedCategory(category)}\r\n        >\r\n          {category}\r\n        </CategoryButton>\r\n      ))}\r\n    </CategoryContainer>\r\n  );\r\n};\r\n\r\nexport default CategorySelector;\r\n","import React from 'react';\r\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver';\r\nimport { GptLayout } from 'styles/gpt/gptLayout';\r\nimport { useStoriesInfinityScroll } from 'queries/gpt';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card } from 'components/shared/Card';\r\nimport Spinner from 'components/shared/Spinner';\r\nimport { Loader } from 'components/shared';\r\nimport { LoaderWrapper } from 'styles/LoaderWrapper';\r\nconst ParentContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 20px;\r\n`;\r\nconst StoryGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 10px;\r\n  padding: 20px;\r\n  width: 100%;\r\n`;\r\n\r\nconst LoadingMessage = styled.div`\r\n  text-align: center;\r\n  padding: 20px;\r\n`;\r\ninterface GptStoryInfinityScrollProps {\r\n  order: 'DESC' | 'ASC' | 'CLICKS';\r\n  searchTitle: string;\r\n  searchAuthorName: string;\r\n  category: string;\r\n}\r\nexport const GptStoryInfinityScroll = ({\r\n  order,\r\n  searchTitle,\r\n  searchAuthorName,\r\n  category,\r\n}: GptStoryInfinityScrollProps) => {\r\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage, status } = useStoriesInfinityScroll(\r\n    order,\r\n    searchTitle,\r\n    searchAuthorName,\r\n    category,\r\n  );\r\n\r\n  const loadMoreRef = useIntersectionObserver(() => {\r\n    if (hasNextPage && !isFetchingNextPage) {\r\n      fetchNextPage();\r\n    }\r\n  });\r\n\r\n  if (status === 'error') return <div>Error loading stories</div>;\r\n\r\n  return (\r\n    <GptLayout>\r\n      {status === 'loading' ? (\r\n        <LoaderWrapper>\r\n          <Loader custom={true} />\r\n        </LoaderWrapper>\r\n      ) : (\r\n        <ParentContainer>\r\n          <StoryGrid>\r\n            {data?.pages.map((page, i) => (\r\n              <React.Fragment key={i}>\r\n                {page.data.map((story) => (\r\n                  <Link\r\n                    key={story.id}\r\n                    to={`/gptpage/detail/${story.id}`}\r\n                    style={{ textDecoration: 'none', color: 'black' }}\r\n                  >\r\n                    <Card\r\n                      id={story.id}\r\n                      title={story.title}\r\n                      imageUrl={\r\n                        story.images.length > 0\r\n                          ? story.images[0].path\r\n                          : 'https://picsum.photos/200/150'\r\n                      }\r\n                      category={story.category}\r\n                      authorName={story.authorName}\r\n                      isPrompt={false}\r\n                      userId={story.userId}\r\n                      clicks={story.clicks}\r\n                      likeCount={story.likeCount}\r\n                      createdAt={story.createdAt}\r\n                    />\r\n                  </Link>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n            {isFetchingNextPage && (\r\n              <LoadingMessage>\r\n                <Spinner width=\"2rem\" />\r\n              </LoadingMessage>\r\n            )}\r\n            <div ref={loadMoreRef} style={{ height: '20px' }} />\r\n          </StoryGrid>\r\n        </ParentContainer>\r\n      )}\r\n    </GptLayout>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Card } from './Card';\r\nimport { storyArrayForInfi } from 'types/gptTypes';\r\n\r\nconst SlideContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst SlideWrapper = styled.div<{ currentIndex: number; cardWidth: number; gap: number }>`\r\n  display: flex;\r\n  transition: transform 0.3s ease-in-out;\r\n  transform: ${({ currentIndex, cardWidth, gap }) =>\r\n    `translateX(-${currentIndex * (cardWidth + gap)}px)`};\r\n  gap: ${({ gap }) => `${gap}px`};\r\n\r\n  > div {\r\n    flex: 0 0 ${({ cardWidth }) => `${cardWidth}px`}; // 카드의 너비를 지정\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  background: rgba(0, 0, 0);\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  z-index: 1;\r\n  &:hover {\r\n    scale: 1.1;\r\n  }\r\n  transition: scale 0.3s ease;\r\n`;\r\n\r\nconst PrevButton = styled(Button)`\r\n  left: 10px;\r\n`;\r\n\r\nconst NextButton = styled(Button)`\r\n  right: 10px;\r\n`;\r\n\r\ninterface CardSlideProps {\r\n  items: storyArrayForInfi | undefined;\r\n}\r\n\r\nexport const CardSlide: React.FC<CardSlideProps> = ({ items }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [cardWidth, setCardWidth] = useState(0);\r\n  const [gap, setGap] = useState(20);\r\n  const slideRef = useRef<HTMLDivElement>(null);\r\n  const [visibleCards, setVisibleCards] = useState(5);\r\n\r\n  useEffect(() => {\r\n    const updateLayout = () => {\r\n      if (slideRef.current) {\r\n        const slideWidth = slideRef.current.clientWidth;\r\n\r\n        // 화면 크기에 따라 visibleCards와 카드 간격을 동적으로 조정\r\n        const newVisibleCards = window.innerWidth >= 1200 ? 5 : window.innerWidth >= 768 ? 3 : 1;\r\n        const newGap = window.innerWidth >= 768 ? 20 : 10;\r\n\r\n        setGap(newGap);\r\n        setVisibleCards(newVisibleCards);\r\n        setCardWidth((slideWidth - newGap * (newVisibleCards - 1)) / newVisibleCards);\r\n\r\n        // currentIndex를 재조정하여 범위를 벗어나지 않도록 처리\r\n        setCurrentIndex((prevIndex) =>\r\n          Math.min(prevIndex, items ? items.length - newVisibleCards : 0),\r\n        );\r\n      }\r\n    };\r\n\r\n    updateLayout();\r\n    window.addEventListener('resize', updateLayout);\r\n\r\n    return () => window.removeEventListener('resize', updateLayout);\r\n  }, [items]);\r\n\r\n  const handlePrev = () => {\r\n    setCurrentIndex((prevIndex) => Math.max(prevIndex - 1, 0));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentIndex((prevIndex) =>\r\n      Math.min(prevIndex + 1, items ? items.length - visibleCards : 0),\r\n    );\r\n  };\r\n\r\n  return items && items.length > 0 ? (\r\n    <SlideContainer ref={slideRef}>\r\n      <SlideWrapper currentIndex={currentIndex} cardWidth={cardWidth} gap={gap}>\r\n        {items.map((item) => (\r\n          <Card\r\n            key={item.id}\r\n            id={item.id}\r\n            title={item.title}\r\n            imageUrl={item.images[0]?.path || 'https://picsum.photos/200/150'}\r\n            clicks={item.clicks}\r\n            createdAt={item.createdAt}\r\n            category={item.category}\r\n            authorName={item.authorName}\r\n            isPrompt={false}\r\n            userId={item.userId}\r\n            likeCount={item.likeCount}\r\n            cardWidth={cardWidth}\r\n          />\r\n        ))}\r\n      </SlideWrapper>\r\n      {currentIndex > 0 && <PrevButton onClick={handlePrev}>&lt;</PrevButton>}\r\n      {currentIndex < items.length - visibleCards && (\r\n        <NextButton onClick={handleNext}>&gt;</NextButton>\r\n      )}\r\n    </SlideContainer>\r\n  ) : (\r\n    <div>데이터가 없습니다.</div>\r\n  );\r\n};\r\n","import { CardSlide } from 'components/shared/CardSlide';\r\nimport styled from 'styled-components';\r\nimport { getStyledColor } from 'utils';\r\nimport { MdRecommend } from 'react-icons/md';\r\nimport { FaRegSmile } from 'react-icons/fa';\r\nimport Spinner from 'components/shared/Spinner';\r\nimport { useGetBestStories, useGetRandomStories } from 'queries/gpt';\r\nconst cardHeight = '340px'; // 카드의 높이와 동일하게 설정\r\n\r\nconst SectionTitle = styled.h2`\r\n  display: inline-block;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  width: 10rem;\r\n  padding: 0.5rem 1rem;\r\n  font-size: 1rem;\r\n  margin-top: 20px;\r\n  margin-bottom: 10px;\r\n  border-radius: 1rem;\r\n  color: ${getStyledColor('forest', 700)};\r\n  background-color: ${getStyledColor('forest', 300)};\r\n`;\r\nconst SpinnerWrap = styled.div<{ $height: string }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: ${({ $height }) => $height};\r\n`;\r\nexport const GptStoryLists = () => {\r\n  const { data: bestStories, status: bestloading } = useGetBestStories();\r\n  const { data: randomStories, status: recommendloading } = useGetRandomStories();\r\n  return (\r\n    <div>\r\n      <SectionTitle>\r\n        최고작\r\n        <FaRegSmile />\r\n      </SectionTitle>\r\n      {bestloading === 'loading' ? (\r\n        <SpinnerWrap $height={cardHeight}>\r\n          <Spinner width=\"3rem\" />{' '}\r\n        </SpinnerWrap>\r\n      ) : (\r\n        <CardSlide items={bestStories?.data.stories} />\r\n      )}\r\n\r\n      <SectionTitle>\r\n        추천작\r\n        <MdRecommend />\r\n      </SectionTitle>\r\n      {recommendloading === 'loading' ? (\r\n        <SpinnerWrap $height={cardHeight}>\r\n          <Spinner width=\"3rem\" />{' '}\r\n        </SpinnerWrap>\r\n      ) : (\r\n        <CardSlide items={randomStories?.data.stories} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Button } from 'components/shared';\r\nimport { GptLayout } from 'styles/gpt/gptLayout';\r\nimport SearchBar from 'components/shared/SearchBar';\r\nimport CategorySelector from 'components/gpt/CategorySelector';\r\nimport { GptStoryInfinityScroll } from 'components/gpt/GptStoryInfinityScroll';\r\nimport { useSearch } from 'hooks/useSearch';\r\nimport { GptStoryLists } from 'components/gpt/GptStoryLists';\r\nimport { useMakeTemplate } from 'queries/gpt';\r\nimport Bottom from 'components/layout/Bottom';\r\n\r\nexport default function GptPage() {\r\n  const {\r\n    searchTitle,\r\n    searchAuthorName,\r\n    setSearchTitle,\r\n    setSearchAuthorName,\r\n    category,\r\n    setCategory,\r\n    order,\r\n    setOrder,\r\n  } = useSearch();\r\n  const { mutate, status } = useMakeTemplate();\r\n  const handleCreateTemplate = () => {\r\n    if (window.confirm('스토리를 만들겠습니까?')) {\r\n      mutate();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <GptLayout>\r\n        <div>\r\n          <GptStoryLists />\r\n          <SearchBar\r\n            setSearchTitle={setSearchTitle}\r\n            setSearchAuthorName={setSearchAuthorName}\r\n            order={order}\r\n            setOrder={setOrder}\r\n            backColorType=\"gray\"\r\n            setCategory={setCategory}\r\n          />\r\n          <CategorySelector selectedCategory={category} setSelectedCategory={setCategory} />\r\n          <Button onClick={handleCreateTemplate} status={status}>\r\n            스토리 만들기\r\n          </Button>\r\n\r\n          <GptStoryInfinityScroll\r\n            order={order}\r\n            searchTitle={searchTitle}\r\n            searchAuthorName={searchAuthorName}\r\n            category={category}\r\n          />\r\n        </div>\r\n      </GptLayout>\r\n      <Bottom />\r\n    </>\r\n  );\r\n}\r\n"],"names":["CategoryContainer","styled","div","pixelToRem","CategoryButton","button","props","isSelected","SELECTED_CATEGORIES","_ref","selectedCategory","setSelectedCategory","_jsx","children","map","category","onClick","ParentContainer","StoryGrid","LoadingMessage","GptStoryInfinityScroll","order","searchTitle","searchAuthorName","data","fetchNextPage","hasNextPage","isFetchingNextPage","status","useStoriesInfinityScroll","loadMoreRef","useIntersectionObserver","GptLayout","LoaderWrapper","Loader","custom","_jsxs","pages","page","i","React","story","Link","to","id","style","textDecoration","color","Card","title","imageUrl","images","length","path","authorName","isPrompt","userId","clicks","likeCount","createdAt","Spinner","width","ref","height","SlideContainer","SlideWrapper","currentIndex","cardWidth","gap","_ref2","_ref3","Button","PrevButton","NextButton","CardSlide","_ref4","items","setCurrentIndex","useState","setCardWidth","setGap","slideRef","useRef","visibleCards","setVisibleCards","useEffect","updateLayout","current","slideWidth","clientWidth","newVisibleCards","window","innerWidth","newGap","prevIndex","Math","min","addEventListener","removeEventListener","item","_item$images$","handlePrev","max","handleNext","cardHeight","SectionTitle","h2","getStyledColor","SpinnerWrap","$height","GptStoryLists","bestStories","bestloading","useGetBestStories","randomStories","recommendloading","useGetRandomStories","FaRegSmile","stories","MdRecommend","GptPage","setSearchTitle","setSearchAuthorName","setCategory","setOrder","useSearch","mutate","useMakeTemplate","_Fragment","SearchBar","backColorType","CategorySelector","handleCreateTemplate","confirm","Bottom"],"sourceRoot":""}