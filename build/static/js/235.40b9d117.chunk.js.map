{"version":3,"file":"static/js/235.40b9d117.chunk.js","mappings":"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","sources":["store/useSelectedBooks.ts","pages/admin/AdminManageBooks.tsx"],"sourcesContent":["import { create } from 'zustand';\r\nimport { SelectedBookState, SelectedBook } from 'types/bookTypes';\r\n\r\nexport const useSelectedBook = create<SelectedBookState>((set) => ({\r\n  selectedBook: <SelectedBook>{},\r\n  setSelectedBook: (newBookInfo: SelectedBook) => set(() => ({ selectedBook: newBookInfo })),\r\n}));\r\n","import { Fragment, useEffect } from 'react';\r\n\r\nimport * as S from 'styles/AdminStyledTemp';\r\nimport { bookQueries } from 'queries';\r\nimport { useSelectedBook } from 'store/useSelectedBooks';\r\nimport { getDateStr } from 'utils';\r\nimport { BookInfoType } from 'types/bookTypes';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { getNextBooks } from 'api/book';\r\nimport Loader from 'components/shared/Loader';\r\nimport { QueryKeys } from 'constant';\r\nimport useAdminPagination from 'hooks/useAdminPagination';\r\nimport AdminPagination from 'components/admin/AdminPagination';\r\nimport AdminLayout from 'components/admin/AdminLayout';\r\nimport AdminTable from 'components/admin/AdminTable';\r\nimport { LoaderScreen } from 'styles/LoaderWrapper';\r\nconst AdminManage = () => {\r\n  const { useDeleteBook, useGetBooksAdmin } = bookQueries;\r\n  const { currentPage, setCurrentPage, handleNavigate, handlePrevPage, handleNextPage } =\r\n    useAdminPagination();\r\n  const { setSelectedBook } = useSelectedBook();\r\n  const { mutate: remove } = useDeleteBook(currentPage);\r\n\r\n  const { data: books, status: bookGetLoading } = useGetBooksAdmin({\r\n    take: 10,\r\n    page: currentPage,\r\n    order__createdAt: 'DESC',\r\n    where__title__i_like: '',\r\n  });\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  useEffect(() => {\r\n    if (currentPage) {\r\n      const key = [QueryKeys.ADMIN, 'books', (currentPage + 1).toString()];\r\n      queryClient.prefetchQuery({\r\n        queryKey: key,\r\n        queryFn: () =>\r\n          getNextBooks({\r\n            take: 10,\r\n            page: currentPage + 1,\r\n            order__createdAt: 'DESC',\r\n            where__title__i_like: '',\r\n          }),\r\n      });\r\n    }\r\n  }, [currentPage, queryClient]);\r\n\r\n  const handleEdit = (id: string) => {\r\n    if (!books) return;\r\n    const selectedBook: BookInfoType | undefined = books.data.find((book) => book.id === id);\r\n    if (!selectedBook) return;\r\n    const { images, title, content, authorName, category } = selectedBook;\r\n\r\n    setSelectedBook({ title, content, images, authorName, category });\r\n    handleNavigate('BookTakelistRes', id);\r\n  };\r\n\r\n  const handleRemove = (id: string) => {\r\n    remove(id);\r\n  };\r\n\r\n  if (bookGetLoading === 'loading') {\r\n    return (\r\n      <LoaderScreen>\r\n        <Loader />\r\n      </LoaderScreen>\r\n    );\r\n  }\r\n\r\n  return books && books.data.length > 0 ? (\r\n    <AdminLayout title=\"책 관리\">\r\n      <AdminTable headers={['No', '제목', '생성자', '조회수', '생성일', '수정 및 삭제']}>\r\n        {books.data.map((book, index) => (\r\n          <Fragment key={book.id}>\r\n            <S.Trow>\r\n              <S.Tcell width={30}>{(currentPage - 1) * 10 + index + 1}</S.Tcell>\r\n              <S.Tcell width={100}>{book.title}</S.Tcell>\r\n              <S.Tcell width={250}>{book.authorName}</S.Tcell>\r\n              <S.Tcell>{book.clicks}</S.Tcell>\r\n              <S.Tcell>{getDateStr(book.createdAt)}</S.Tcell>\r\n              <S.Tcell>\r\n                <S.EditIcon onClick={() => handleEdit(book.id)} />\r\n                <S.TrashIcon onClick={() => handleRemove(book.id)} />\r\n              </S.Tcell>\r\n            </S.Trow>\r\n          </Fragment>\r\n        ))}\r\n      </AdminTable>\r\n\r\n      <S.PaginationWrapper>\r\n        <AdminPagination\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          total={books.total}\r\n          handlePrevPage={handlePrevPage}\r\n          handleNextPage={handleNextPage}\r\n        />\r\n      </S.PaginationWrapper>\r\n    </AdminLayout>\r\n  ) : (\r\n    <AdminLayout title=\"책 관리\">\r\n      <S.NoMessage>책이 없습니다.</S.NoMessage>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminManage;\r\n"],"names":["useSelectedBook","create","set","selectedBook","setSelectedBook","newBookInfo","AdminManage","useDeleteBook","useGetBooksAdmin","bookQueries","currentPage","setCurrentPage","handleNavigate","handlePrevPage","handleNextPage","useAdminPagination","mutate","remove","data","books","status","bookGetLoading","take","page","order__createdAt","where__title__i_like","queryClient","useQueryClient","useEffect","key","QueryKeys","ADMIN","toString","prefetchQuery","queryKey","queryFn","getNextBooks","_jsx","LoaderScreen","children","Loader","length","_jsxs","AdminLayout","title","AdminTable","headers","map","book","index","Fragment","S","width","authorName","clicks","getDateStr","createdAt","onClick","id","find","images","content","category","handleEdit","handleRemove","AdminPagination","total"],"sourceRoot":""}